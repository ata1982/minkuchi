// Minkuchi Database Schema
// 地域密着型企業・サービスレビュープラットフォーム

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ユーザー管理
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  points    Int      @default(0)
  password  String?  // For credentials login
  emailVerified DateTime?
  image     String?  // For OAuth providers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Application relations
  reviews         Review[]
  ownedCompanies  Company[]
  userPreferences UserPreferences?
  badges          UserBadge[]
  notifications   Notification[]
  events          EventAttendee[]

  @@map("users")
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  location      String?
  categories    String?  // JSON文字列として保存
  notifications Boolean  @default(true)
  theme         Theme    @default(LIGHT)
  language      String   @default("ja")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  createdAt   DateTime @default(now())

  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  unlockedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// 企業・サービス管理
model Company {
  id          String   @id @default(cuid())
  name        String
  category    String
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  description String
  location    String
  address     String
  phone       String?
  website     String?
  imageUrl    String?
  images      String?  // JSON文字列として保存
  tags        String?  // JSON文字列として保存
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 営業時間をJSONとして保存
  businessHours String // JSON文字列

  // リレーション
  ownerId         String?
  owner           User?             @relation(fields: [ownerId], references: [id])
  reviews         Review[]
  events          Event[]
  companyResponse CompanyResponse[]

  @@map("companies")
}

// レビュー管理
model Review {
  id            String   @id @default(cuid())
  userId        String
  companyId     String
  rating        Int // 1-5の評価
  title         String
  content       String
  images        String?  // JSON文字列として保存
  tags          String?  // JSON文字列として保存
  helpfulCount  Int      @default(0)
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // リレーション
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  response CompanyResponse[]

  @@map("reviews")
}

model CompanyResponse {
  id              String   @id @default(cuid())
  reviewId        String
  companyId       String
  companyOwnerId  String
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // リレーション
  review  Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([reviewId]) // 1つのレビューに対して1つの返信のみ
  @@map("company_responses")
}

// カテゴリ管理
model Category {
  id           String @id @default(cuid())
  name         String @unique
  emoji        String
  description  String
  isActive     Boolean @default(true)
  sortOrder    Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subcategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  description String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, name])
  @@map("subcategories")
}

// イベント管理
model Event {
  id            String   @id @default(cuid())
  title         String
  description   String
  companyId     String?
  location      String
  startDate     DateTime
  endDate       DateTime
  category      String
  imageUrl      String?
  tags          String?  // JSON文字列として保存
  attendeeCount Int      @default(0)
  maxAttendees  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // リレーション
  company   Company?        @relation(fields: [companyId], references: [id])
  attendees EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    AttendeeStatus @default(REGISTERED)
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_attendees")
}

// 通知管理
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  content   String
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  COMPANY_OWNER
}

enum Theme {
  LIGHT
  DARK
}

enum NotificationType {
  REVIEW_RESPONSE
  NEW_REVIEW
  EVENT
  PROMOTION
  SYSTEM
}

enum AttendeeStatus {
  REGISTERED
  ATTENDED
  CANCELLED
}
