// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?      // For credentials auth
  displayName   String?      // For user profile
  username      String?      // For user profile
  profileImage  String?      // For user profile
  bio           String?      // For user bio
  location      String?      // For user location
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  reviewLikes   ReviewLike[] // Add review likes
  services      Service[]    // Services created by user
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  slug        String    @unique
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Service {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  address       String       // Changed from location to address
  website       String?
  phone         String?
  openingHours  String?      // Add opening hours
  averageRating Float        @default(0) // For calculated average rating
  reviewCount   Int          @default(0) // For review count
  categoryId    Int          // Add category relation
  createdById   Int          // Add creator relation
  reviews       Review[]
  category      Category     @relation(fields: [categoryId], references: [id])
  createdBy     User         @relation(fields: [createdById], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("services")
}

model Review {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  rating      Int          @db.SmallInt
  pros        String?      // Additional fields from schema
  cons        String?      // Additional fields from schema
  visitDate   DateTime?    // Additional fields from schema
  isHidden    Boolean      @default(false) // For moderation
  userId      Int
  serviceId   Int
  reviewLikes ReviewLike[] // Add review likes relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model ReviewLike {
  id       Int @id @default(autoincrement())
  userId   Int
  reviewId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("review_likes")
}