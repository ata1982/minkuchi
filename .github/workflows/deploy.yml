name: Deploy Minkuchi to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Current working directory: $(pwd)"
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of GitHub workspace:"
          ls -la $GITHUB_WORKSPACE
          echo "Looking for package.json:"
          find . -name "package.json" -type f -maxdepth 2
          echo "Checking if package.json exists:"
          if [ -f package.json ]; then
            echo "✅ package.json found"
            cat package.json | head -10
          else
            echo "❌ package.json NOT found"
          fi
          echo "=== End Debug ==="
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Verify package.json before install
        run: |
          echo "Verifying package.json existence..."
          if [ ! -f package.json ]; then
            echo "❌ ERROR: package.json not found in $(pwd)"
            exit 1
          fi
          echo "✅ package.json exists"
          
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if [ -f package-lock.json ]; then
            echo "Using npm ci with package-lock.json"
            npm ci
          else
            echo "Using npm install (no package-lock.json found)"
            npm install
          fi
          
      - name: Verify node_modules
        run: |
          echo "Checking node_modules..."
          if [ -d node_modules ]; then
            echo "✅ node_modules directory exists"
            echo "Number of packages: $(ls node_modules | wc -l)"
          else
            echo "❌ node_modules directory not found"
            exit 1
          fi
          
      - name: Generate Prisma client
        run: |
          echo "Generating Prisma client..."
          npx prisma generate --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: "postgresql://localhost:5432/placeholder"
          
      - name: Type check
        run: |
          echo "Running TypeScript type check..."
          npm run type-check
        
      - name: Lint check
        run: |
          echo "Running ESLint check..."
          npm run lint
        
      - name: Build test
        run: |
          echo "Running production build test..."
          npm run build:ci
        env:
          NEXTAUTH_SECRET: "test-secret-for-ci-build-only"
          NEXTAUTH_URL: "http://localhost:3000"
          DATABASE_URL: "postgresql://localhost:5432/placeholder"
          GOOGLE_CLIENT_ID: "placeholder"
          GOOGLE_CLIENT_SECRET: "placeholder"
          APP_URL: "http://localhost:3000"
          NODE_ENV: production

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Render
        id: deploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          timeout: 60000
        continue-on-error: true
          
      - name: Check deploy result
        run: |
          echo "Deploy status: ${{ steps.deploy.outputs.status }}"
          echo "Deploy response: ${{ steps.deploy.outputs.response }}"
          if [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "Deploy failed, but continuing..."
          fi
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Verify deployment status
        id: status-check
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}'
          method: 'GET'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.RENDER_API_KEY }}"}'
          timeout: 30000
        continue-on-error: true
        
      - name: Show deployment status
        run: |
          echo "Status check result: ${{ steps.status-check.outputs.status }}"
          echo "Status response: ${{ steps.status-check.outputs.response }}"
          
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Health Check
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.HEALTH_CHECK_URL }}
          method: 'GET'
          timeout: 30000
          retry: 3
          retryWait: 10000