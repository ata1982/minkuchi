name: Deploy Minkuchi to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
        
      - name: Verify repository structure
        run: |
          echo "=== Repository Structure Debug ==="
          echo "Current working directory: $(pwd)"
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Repository owner: $GITHUB_REPOSITORY_OWNER"
          echo "Repository name: $GITHUB_REPOSITORY"
          echo ""
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Checking for package.json:"
          if [ -f package.json ]; then
            echo "‚úÖ package.json found at: $(pwd)/package.json"
            echo "First few lines of package.json:"
            head -5 package.json
          else
            echo "‚ùå package.json NOT found in current directory"
            echo "Searching for package.json in subdirectories:"
            find . -name "package.json" -type f 2>/dev/null || echo "No package.json found anywhere"
          fi
          echo "=== End Debug ==="
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          echo "Installing dependencies in $(pwd)..."
          if [ -f package-lock.json ]; then
            echo "Using npm ci with package-lock.json"
            npm ci
          else
            echo "Using npm install"
            npm install
          fi
          
      - name: Generate Prisma client
        run: npx prisma generate --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: "postgresql://localhost:5432/placeholder"
          
      - name: Type check
        run: npm run type-check
        
      - name: Lint check
        run: npm run lint
        
      - name: Build test
        run: npm run build:ci
        env:
          NEXTAUTH_SECRET: "test-secret-for-ci-build-only"
          NEXTAUTH_URL: "http://localhost:3000"
          DATABASE_URL: "postgresql://localhost:5432/placeholder"
          GOOGLE_CLIENT_ID: "placeholder"
          GOOGLE_CLIENT_SECRET: "placeholder"
          APP_URL: "http://localhost:3000"
          NODE_ENV: production

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Render Deploy
        id: deploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          timeout: 90000
        continue-on-error: true
          
      - name: Check deploy result
        run: |
          echo "Deploy status: ${{ steps.deploy.outputs.status }}"
          echo "Deploy response: ${{ steps.deploy.outputs.response }}"
          if [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "‚ö†Ô∏è Deploy request failed, but continuing to verify service..."
            echo "Error details: ${{ steps.deploy.outputs.error }}"
          else
            echo "‚úÖ Deploy request successful"
          fi
          
      - name: Wait for deployment to process
        run: |
          echo "‚è≥ Waiting for deployment to process..."
          sleep 60
        
      - name: Verify service status
        id: status-check
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}'
          method: 'GET'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.RENDER_API_KEY }}"}'
          timeout: 45000
        continue-on-error: true
        
      - name: Show service status
        run: |
          echo "Service status check: ${{ steps.status-check.outputs.status }}"
          if [ "${{ steps.status-check.outcome }}" = "success" ]; then
            echo "‚úÖ Service status retrieved successfully"
            echo "Service response: ${{ steps.status-check.outputs.response }}"
          else
            echo "‚ö†Ô∏è Service status check failed"
            echo "Error: ${{ steps.status-check.outputs.error }}"
          fi
          
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for service to be ready
        run: |
          echo "‚è≥ Waiting for service to be fully ready..."
          sleep 120
          
      - name: Health Check (Attempt 1)
        id: health-check-1
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.HEALTH_CHECK_URL }}
          method: 'GET'
          timeout: 60000
        continue-on-error: true
        
      - name: Health Check Result 1
        run: |
          echo "Health check attempt 1: ${{ steps.health-check-1.outputs.status }}"
          if [ "${{ steps.health-check-1.outcome }}" = "success" ]; then
            echo "‚úÖ Health check successful!"
            echo "Response: ${{ steps.health-check-1.outputs.response }}"
          else
            echo "‚ùå Health check failed, will retry..."
            echo "Error: ${{ steps.health-check-1.outputs.error }}"
          fi
          
      - name: Wait before retry
        if: steps.health-check-1.outcome != 'success'
        run: |
          echo "‚è≥ Waiting 30 seconds before retry..."
          sleep 30
          
      - name: Health Check (Attempt 2)
        if: steps.health-check-1.outcome != 'success'
        id: health-check-2
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.HEALTH_CHECK_URL }}
          method: 'GET'
          timeout: 60000
        continue-on-error: true
        
      - name: Health Check Result 2
        if: steps.health-check-1.outcome != 'success'
        run: |
          echo "Health check attempt 2: ${{ steps.health-check-2.outputs.status }}"
          if [ "${{ steps.health-check-2.outcome }}" = "success" ]; then
            echo "‚úÖ Health check successful on retry!"
            echo "Response: ${{ steps.health-check-2.outputs.response }}"
          else
            echo "‚ùå Health check failed again, will make final attempt..."
            echo "Error: ${{ steps.health-check-2.outputs.error }}"
          fi
          
      - name: Wait before final attempt
        if: steps.health-check-1.outcome != 'success' && steps.health-check-2.outcome != 'success'
        run: |
          echo "‚è≥ Waiting 60 seconds before final attempt..."
          sleep 60
          
      - name: Health Check (Final Attempt)
        if: steps.health-check-1.outcome != 'success' && steps.health-check-2.outcome != 'success'
        id: health-check-3
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.HEALTH_CHECK_URL }}
          method: 'GET'
          timeout: 90000
        continue-on-error: false
        
      - name: Final Health Check Result
        run: |
          if [ "${{ steps.health-check-1.outcome }}" = "success" ] || [ "${{ steps.health-check-2.outcome }}" = "success" ] || [ "${{ steps.health-check-3.outcome }}" = "success" ]; then
            echo "üéâ Deployment verification successful!"
          else
            echo "üí• All health check attempts failed"
            echo "This may indicate a deployment issue or the service is still starting up"
            exit 1
          fi